---
name: 'Controller Authorization and Provisioning'

concurrency:
  group: ${{ github.workflow }}

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      # this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: GitHub Repository Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'controller'

      - name: Controllers Initialization
        run : |
          echo 'applications = [' > applications.auto.tfvars ;
          j=0
          for APPLICATIONS in $(jq -r '.[].APPLICATIONS[] | @base64' <<< ${{ secrets.APPLICATIONS }} )
          do
            _jq_application() {
              echo ${APPLICATIONS} | base64 --decode | jq -r ${1}
            }
            j=$((j+1))
            echo "  {" >> applications.auto.tfvars
            echo "    REPOSITORY_FULL_NAME = \"$(_jq_application '.REPOSITORY_FULL_NAME')\"" >> applications.auto.tfvars
            echo "    DEPLOYED             = \"$(_jq_application '.DEPLOYED')\"" >> applications.auto.tfvars
            echo "    AZURE_REGION         = \"$(_jq_application '.AZURE_REGION')\"" >> applications.auto.tfvars
            echo "    OWNER_EMAIL          = \"$(_jq_application '.OWNER_EMAIL')\"" >> applications.auto.tfvars
            echo "    REPOSITORY_TOKEN     = \"$(_jq_application '.REPOSITORY_TOKEN')\"" >> applications.auto.tfvars
            echo "    ARM_SUBSCRIPTION_ID  = \"$(_jq_application '.ARM_SUBSCRIPTION_ID')\"" >> applications.auto.tfvars
            echo "    ARM_TENANT_ID        = \"$(_jq_application '.ARM_TENANT_ID')\"" >> applications.auto.tfvars
            if [[ "${j}" != "${#APPLICATIONS[@]}" ]];then
              echo '  },' >> applications.auto.tfvars
            else
              echo '  }' >> applications.auto.tfvars
            fi
          done
          echo ']' >> applications.auto.tfvars
          ls -al
          cat applications.auto.tfvars

      - name: Microsoft Azure Authentication
        uses: azure/login@v1
        with:
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          allow-no-subscriptions: true

      - name: HashiCorp Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

            #- name: terraform fmt -check
            #run: terraform fmt -check

      - name: terraform init
        id: init
        env:
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}
          TFSTATE_CONTAINER_NAME: ${{ secrets.TFSTATE_CONTAINER_NAME }}
          TFSTATE_KEY: ${{ secrets.TFSTATE_KEY }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform init -backend-config="storage_account_name=${TFSTATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${TFSTATE_CONTAINER_NAME}" -backend-config="resource_group_name=${AZURE_RESOURCE_GROUP_NAME}" -backend-config="key=${TFSTATE_KEY}" -backend-config="use_oidc=true" -input=false

      - name: terraform plan
        id: tf-plan
        env:
          GITHUB_TOKEN:  ${{ secrets.REPOSITORY_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      - name: Render Plan
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    needs: [terraform-plan]
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'controller'

      - name: Controllers Initialization
        run : |
          echo 'applications = [' > applications.auto.tfvars ;
          j=0
          for APPLICATIONS in $(jq -r '.[].APPLICATIONS[] | @base64' <<< ${{ secrets.APPLICATIONS }} )
          do
            _jq_application() {
              echo ${APPLICATIONS} | base64 --decode | jq -r ${1}
            }
            j=$((j+1))
            echo "  {" >> applications.auto.tfvars
            echo "    REPOSITORY_FULL_NAME = \"$(_jq_application '.REPOSITORY_FULL_NAME')\"" >> applications.auto.tfvars
            echo "    REPOSITORY_TOKEN     = \"$(_jq_application '.REPOSITORY_TOKEN')\"" >> applications.auto.tfvars
            echo "    DEPLOYED             = \"$(_jq_application '.DEPLOYED')\"" >> applications.auto.tfvars
            echo "    AZURE_REGION         = \"$(_jq_application '.AZURE_REGION')\"" >> applications.auto.tfvars
            echo "    OWNER_EMAIL          = \"$(_jq_application '.OWNER_EMAIL')\"" >> applications.auto.tfvars
            echo "    ARM_SUBSCRIPTION_ID  = \"$(_jq_application '.ARM_SUBSCRIPTION_ID')\"" >> applications.auto.tfvars
            echo "    ARM_TENANT_ID        = \"$(_jq_application '.ARM_TENANT_ID')\"" >> applications.auto.tfvars
            if [[ "${j}" != "${#APPLICATIONS[@]}" ]];then
              echo '  },' >> applications.auto.tfvars
            else
              echo '  }' >> applications.auto.tfvars
            fi
          done
          echo ']' >> applications.auto.tfvars

      - name: Microsoft Azure Authentication
        uses: azure/login@v1
        with:
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          allow-no-subscriptions: true

      - name: Hashicorp Terraform
        uses: hashicorp/setup-terraform@v2

      - name: terraform init
        id: init
        env:
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}
          TFSTATE_CONTAINER_NAME: ${{ secrets.TFSTATE_CONTAINER_NAME }}
          TFSTATE_KEY: ${{ secrets.TFSTATE_KEY }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform init -backend-config="storage_account_name=${TFSTATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${TFSTATE_CONTAINER_NAME}" -backend-config="resource_group_name=${AZURE_RESOURCE_GROUP_NAME}" -backend-config="key=${TFSTATE_KEY}" -backend-config="use_oidc=true" -input=false

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan

      - name: terraform apply
        env:
          GITHUB_TOKEN:  ${{ secrets.REPOSITORY_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_USE_OIDC: true
        run: terraform apply -auto-approve tfplan
