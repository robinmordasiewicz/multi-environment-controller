---
name: "Controller Init"

concurrency:
  group: ${{ github.workflow }}

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "controller/**.tf"

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.terraform.outputs.action }}
    steps:
      - id: terraform
        name: "Application deployed is: ${{ vars.CONTROLLER_DEPLOYED }}"
        shell: bash
        run: |
          env
          if [[ "${{ vars.CONTROLLER_DEPLOYED }}" == "true" ]]
          then
            echo 'action=apply' >> ${GITHUB_OUTPUT}
          else
            echo 'action=destroy' >> ${GITHUB_OUTPUT}
          fi

  terraform-plan:
    name: "Terraform Plan"
    needs: [terraform]
    if: needs.terraform.outputs.action == 'apply'
    runs-on: ubuntu-latest
    env:
      # this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: GitHub Repository Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          sparse-checkout: "controller"

      - name: Controllers Initialization
        run: |
          mv controller/*.tf ./
          echo 'applications = [' > terraform.auto.tfvars ;
          j=0
          APPS=$(echo ${{ secrets.APPLICATIONS }} | base64 --decode)
          for APPLICATIONS in $(jq -r '.[] | @base64' <<< "${APPS}" )
          do
            _jq_application() {
              echo ${APPLICATIONS} | base64 --decode | jq -r ${1}
            }
            j=$((j+1))
            echo "  {" >> terraform.auto.tfvars
            echo "    REPOSITORY_FULL_NAME = \"$(_jq_application '.REPOSITORY_FULL_NAME')\"" >> terraform.auto.tfvars
            echo "    DEPLOYED             = \"$(_jq_application '.DEPLOYED')\"" >> terraform.auto.tfvars
            echo "    AZURE_REGION         = \"$(_jq_application '.AZURE_REGION')\"" >> terraform.auto.tfvars
            echo "    OWNER_EMAIL          = \"$(_jq_application '.OWNER_EMAIL')\"" >> terraform.auto.tfvars
            echo "    REPOSITORY_TOKEN     = \"$(_jq_application '.REPOSITORY_TOKEN')\"" >> terraform.auto.tfvars
            echo "    ARM_SUBSCRIPTION_ID  = \"$(_jq_application '.ARM_SUBSCRIPTION_ID')\"" >> terraform.auto.tfvars
            echo "    ARM_TENANT_ID        = \"$(_jq_application '.ARM_TENANT_ID')\"" >> terraform.auto.tfvars
            if [[ "${j}" != "${#APPLICATIONS[@]}" ]];then
              echo '  },' >> terraform.auto.tfvars
            else
              echo '  }' >> terraform.auto.tfvars
            fi
          done
          echo ']' >> terraform.auto.tfvars

      - name: Microsoft Azure Authentication
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          subscription-id: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          allow-no-subscriptions: true

      - name: HashiCorp Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: terraform init
        id: init
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_CLI_ARGS_init: -backend-config="storage_account_name=${{ secrets.CONTROLLER_TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.CONTROLLER_TFSTATE_CONTAINER_NAME }}" -backend-config="resource_group_name=${{ secrets.CONTROLLER_AZURE_RESOURCE_GROUP_NAME }}" -backend-config="key=${{ github.ref_name }}" -backend-config="use_oidc=true" -input=false
        run: terraform init

      - name: terraform plan
        id: tf-plan
        env:
          GITHUB_TOKEN: ${{ secrets.CONTROLLER_REPOSITORY_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_VAR_controller_repository_full_name: ${{ github.repository }}
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            terraform show -json tfplan > tfplan.json
            exit 0
          fi

      - name: Publish Artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        with:
          name: tfplan
          path: tfplan

      - name: Render Plan
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: "Terraform Apply"
    needs: [terraform, terraform-plan]
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2 && needs.terraform.outputs.action == 'apply'
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          sparse-checkout: "controller"

      - name: Controllers Initialization
        run: |
          mv controller/*.tf ./
          echo 'applications = [' > terraform.auto.tfvars ;
          j=0
          APPS=$(echo ${{ secrets.APPLICATIONS }} | base64 --decode)
          for APPLICATIONS in $(jq -r '.[] | @base64' <<< "${APPS}" )
          do
            _jq_application() {
              echo ${APPLICATIONS} | base64 --decode | jq -r ${1}
            }
            j=$((j+1))
            echo "  {" >> terraform.auto.tfvars
            echo "    REPOSITORY_FULL_NAME = \"$(_jq_application '.REPOSITORY_FULL_NAME')\"" >> terraform.auto.tfvars
            echo "    REPOSITORY_TOKEN     = \"$(_jq_application '.REPOSITORY_TOKEN')\"" >> terraform.auto.tfvars
            echo "    DEPLOYED             = \"$(_jq_application '.DEPLOYED')\"" >> terraform.auto.tfvars
            echo "    AZURE_REGION         = \"$(_jq_application '.AZURE_REGION')\"" >> terraform.auto.tfvars
            echo "    OWNER_EMAIL          = \"$(_jq_application '.OWNER_EMAIL')\"" >> terraform.auto.tfvars
            echo "    ARM_SUBSCRIPTION_ID  = \"$(_jq_application '.ARM_SUBSCRIPTION_ID')\"" >> terraform.auto.tfvars
            echo "    ARM_TENANT_ID        = \"$(_jq_application '.ARM_TENANT_ID')\"" >> terraform.auto.tfvars
            if [[ "${j}" != "${#APPLICATIONS[@]}" ]];then
              echo '  },' >> terraform.auto.tfvars
            else
              echo '  }' >> terraform.auto.tfvars
            fi
          done
          echo ']' >> terraform.auto.tfvars

      - name: Microsoft Azure Authentication
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          subscription-id: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          allow-no-subscriptions: true

      - name: Hashicorp Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: terraform init
        id: init
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_CLI_ARGS_init: -backend-config="storage_account_name=${{ secrets.CONTROLLER_TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.CONTROLLER_TFSTATE_CONTAINER_NAME }}" -backend-config="resource_group_name=${{ secrets.CONTROLLER_AZURE_RESOURCE_GROUP_NAME }}" -backend-config="key=${{ github.ref_name }}" -backend-config="use_oidc=true" -input=false
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: tfplan

      - name: terraform apply
        env:
          GITHUB_TOKEN: ${{ secrets.CONTROLLER_REPOSITORY_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_VAR_controller_repository_full_name: ${{ github.repository }}
        run: terraform apply -auto-approve tfplan

  destroy:
    name: "Terraform Destroy"
    needs: [terraform]
    if: needs.terraform.outputs.action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository Checkout
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          sparse-checkout: "controller"

      - name: Controllers Initialization
        run: |
          mv controller/*.tf ./
          echo 'applications = [' > terraform.auto.tfvars ;
          j=0
          APPS=$(echo ${{ secrets.APPLICATIONS }} | base64 --decode)
          for APPLICATIONS in $(jq -r '.[] | @base64' <<< "${APPS}" )
          do
            _jq_application() {
              echo ${APPLICATIONS} | base64 --decode | jq -r ${1}
            }
            j=$((j+1))
            echo "  {" >> terraform.auto.tfvars
            echo "    REPOSITORY_FULL_NAME = \"$(_jq_application '.REPOSITORY_FULL_NAME')\"" >> terraform.auto.tfvars
            echo "    DEPLOYED             = \"$(_jq_application '.DEPLOYED')\"" >> terraform.auto.tfvars
            echo "    AZURE_REGION         = \"$(_jq_application '.AZURE_REGION')\"" >> terraform.auto.tfvars
            echo "    OWNER_EMAIL          = \"$(_jq_application '.OWNER_EMAIL')\"" >> terraform.auto.tfvars
            echo "    REPOSITORY_TOKEN     = \"$(_jq_application '.REPOSITORY_TOKEN')\"" >> terraform.auto.tfvars
            echo "    ARM_SUBSCRIPTION_ID  = \"$(_jq_application '.ARM_SUBSCRIPTION_ID')\"" >> terraform.auto.tfvars
            echo "    ARM_TENANT_ID        = \"$(_jq_application '.ARM_TENANT_ID')\"" >> terraform.auto.tfvars
            if [[ "${j}" != "${#APPLICATIONS[@]}" ]];then
              echo '  },' >> terraform.auto.tfvars
            else
              echo '  }' >> terraform.auto.tfvars
            fi
          done
          echo ']' >> terraform.auto.tfvars

      - name: Microsoft Azure Authentication
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          subscription-id: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}

      - name: Hashicorp Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: terraform init
        id: init
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_CLI_ARGS_init: -backend-config="storage_account_name=${{ secrets.CONTROLLER_TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.CONTROLLER_TFSTATE_CONTAINER_NAME }}" -backend-config="resource_group_name=${{ secrets.CONTROLLER_AZURE_RESOURCE_GROUP_NAME }}" -backend-config="key=${{ github.ref_name }}" -backend-config="use_oidc=true" -input=false
        run: terraform init

      - name: terraform destroy
        id: destroy
        env:
          GITHUB_TOKEN: ${{ secrets.CONTROLLER_REPOSITORY_TOKEN }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CONTROLLER_ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.CONTROLLER_ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.CONTROLLER_ARM_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_VAR_controller_repository_full_name: ${{ github.repository }}
        run: |
          terraform destroy -auto-approve
